# -*- coding: utf-8 -*-
"""Heart_Disease.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sNFAHdy0yU19Pi3fSikk-4G5Tq7QtiPT

# Loading Data
"""

from google.colab import drive

   drive.mount('/content/drive')

import pandas as pd

   df = pd.read_csv('/content/drive/MyDrive/heart.csv')

df.head()

df.info()

df.describe()

"""# Preprocessing"""

x = df.drop('HeartDisease', axis = 1) # axis = 1 because we want column or we can use axis = column
y = df['HeartDisease']

# label encoder
from sklearn.preprocessing import LabelEncoder
x = x.apply(LabelEncoder().fit_transform)
x.head()

from sklearn.model_selection import train_test_split
train_features, train_labels, test_features, test_labels = train_test_split(x, y, test_size = 0.2, random_state = 42)

import numpy as np
train_features = np.array(train_features)
train_labels = np.array(train_labels)
test_features = np.array(test_features)
test_labels = np.array(test_labels)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
train_features = scaler.fit_transform(train_features)
train_labels = scaler.transform(train_labels)

"""# Model definition"""

import tensorflow as tf
from tensorflow import keras

model = keras.Sequential()

model.add(keras.layers.Input(shape = (11, )))
model.add(keras.layers.Dense(units = 128, activation = 'relu'))
model.add(keras.layers.Dropout(0.2))
model.add(keras.layers.Dense(units = 128, activation = 'relu'))
model.add(keras.layers.Dropout(0.5))
model.add(keras.layers.Dense(units = 128, activation = 'relu'))
model.add(keras.layers.Dropout(0.3))
model.add(keras.layers.Dense(units = 128, activation = 'relu'))
model.add(keras.layers.Dense(units = 1, activation = 'sigmoid'))

model.compile(optimizer = tf.optimizers.Adam(),
              loss = tf.losses.binary_crossentropy,
              metrics = ['accuracy'])

model.summary()

hist = model.fit(train_features, test_features, epochs = 60, batch_size = 128, validation_data = [train_labels, test_labels])

model.evaluate(train_labels, test_labels)

"""# Plot"""

import matplotlib.pyplot as plt

plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])

import matplotlib.pyplot as plt

plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])